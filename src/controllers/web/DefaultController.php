<?php

namespace portalium\storage\controllers\web;

use portalium\workspace\models\WorkspaceUser;
use Yii;
use yii\web\UploadedFile;
use yii\filters\VerbFilter;
use portalium\web\Controller;
use yii\web\NotFoundHttpException;
use portalium\storage\models\Storage;
use portalium\storage\models\StorageSearch;
use portalium\storage\Module;
use yii\filters\AccessControl;
use yii\web\ForbiddenHttpException;
use yii\web\HttpException;

/**
 * StorageController implements the CRUD actions for Storage model.
 */
class DefaultController extends Controller
{
    /**
     * @inheritDoc
     */
    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                'verbs' => [
                    'class' => VerbFilter::className(),
                    'actions' => [
                        'delete' => ['POST'],
                    ],
                ],
                'access' => [
                    'class' => AccessControl::className(),
                    'only' => ['get-file'],
                    'rules' => [
                        [
                            'allow' => true,
                        ],
                    ],
                ],
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function beforeAction($action)
    {
        if (Yii::$app->workspace->id == null && $action->id != 'get-file') {
            Yii::$app->session->setFlash('error', Module::t('You must select a workspace first.'));
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                throw new ForbiddenHttpException(Module::t('You must select a workspace first.'));
            } else {
                throw new NotFoundHttpException(Module::t('You must select a workspace first.'));
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Storage models.
     *
     * @return string
     */
    public function actionIndex()
    {
        if (!\Yii::$app->user->can('storageWebDefaultIndex', ['id_module' => 'storage']) && !\Yii::$app->user->can('storageWebDefaultIndexForWorkspace', ['id_module' => 'storage'])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }


        $model = new Storage();

        return $this->render('index', [
            'model' => $model,
        ]);
    }

    /**
     * Lists all Storage models.
     *
     * @return string
     */
    public function actionManage()
    {
        if (!\Yii::$app->user->can('storageWebDefaultIndex', ['id_module' => 'storage']) && !\Yii::$app->user->can('storageStorageFindAll')) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }

        return $this->render('index', [
            'manage' => true
        ]);
    }

    /**
     * Displays a single Storage model.
     * @param int $id_storage Id Storage
     * @return string
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id_storage)
    {
        if (!Yii::$app->user->can('storageWebDefaultView', ['id_module' => 'storage'])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        return $this->render('view', [
            'model' => $this->findModel($id_storage),
        ]);
    }

    /**
     * Creates a new Storage model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return string|\yii\web\Response
     */
    public function actionCreate()
    {
        if (!Yii::$app->user->can('storageWebDefaultCreate', ['id_module' => 'storage'])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }

        $model = new Storage();
        if ($this->request->isAjax) {
            if ($this->request->post('id_storage') != 'null') {
                return $this->updatePjax($this->request->post('id_storage'));
            }
            $file = UploadedFile::getInstanceByName('file');
            if ($file) {
                $fileName = md5(rand()) . '.' . $file->extension;
                if ($file->saveAs(Yii::$app->basePath . '/../' . Yii::$app->setting->getValue('storage::path') . '/' . $fileName)) {
                    $model->name = $fileName;
                    $model->title = $this->request->post('title');
                    $model->id_user = Yii::$app->user->id;
                    $model->mime_type = (Storage::MIME_TYPE[$file->type] ?? Storage::MIME_TYPE['other']);
                    $model->id_workspace = Yii::$app->workspace->id;
                    if ($model->save()) {
                        return json_encode(['name' => $fileName]);
                    } else {
                        $error = '';
                        foreach ($model->getErrors() as $key => $value) {
                            $error .= $value[0] . '</br>';
                        }
                        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                        throw new HttpException(500, Module::t($error));
                    }
                } else {
                    return "error";
                }
            }
        }
        if ($this->request->isPost) {
            if ($model->load($this->request->post())) {
                $model->id_workspace = Yii::$app->workspace->id;
                $model->file = UploadedFile::getInstance($model, 'file');
                if ($model->upload()) {
                    \Yii::$app->session->addFlash('success', Module::t('File uploaded successfully'));
                    return $this->redirect(['view', 'id_storage' => $model->id_storage]);
                } else {
                    \Yii::$app->session->addFlash('error', Module::t('Error uploading file'));
                    \Yii::$app->session->addFlash('error', Module::t('Error uploading file</br>Allowed file types: {types}', ['types' => $model->getAllowedExtensions()]));
                    return $this->render('create', [
                        'model' => $model,
                    ]);
                }
            }
        } else {
            $model->loadDefaultValues();
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Storage model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param int $id_storage Id Storage
     * @return string|\yii\web\Response
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        if (!Yii::$app->user->can('storageWebDefaultUpdate', ['model' => $this->findModel($id)])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        $model = $this->findModel($id);
        if ($this->request->isPost && $model->load($this->request->post())) {
            $model->file = UploadedFile::getInstance($model, 'file');
            if ($model->file) {
                $model->deleteFile($model->name);
            }
            if ($model->upload()) {
                \Yii::$app->session->addFlash('success', Module::t('File uploaded successfully'));
                return $this->redirect(['view', 'id_storage' => $model->id_storage]);
            } else {
                \Yii::$app->session->addFlash('error', Module::t('Error uploading file'));
                \Yii::$app->session->addFlash('error', Module::t('Error uploading file</br>Allowed file types: {types}', ['types' => $model->getAllowedExtensions()]));
                return $this->render('update', [
                    'model' => $model,
                ]);
            }
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    protected function updatePjax($id_storage)
    {
        $model = $this->findModel($id_storage);
        if (!Yii::$app->user->can('storageWebDefaultUpdate', ['model' => $this->findModel($id_storage)])) {
            return json_encode(['error' => Module::t('Error uploading file')]);
        }
        $model->title = $this->request->post('title');
        $model->file = UploadedFile::getInstanceByName('file');
        if ($model->file) {
            $model->deleteFile($model->name);
        }
        if ($model->upload()) {
            return json_encode(['name' => $model->name]);
        } else {
            return json_encode(['error' => Module::t('Error uploading file')]);
        }
    }

    /**
     * Deletes an existing Storage model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param int $id_storage Id Storage
     * @return \yii\web\Response
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id_storage)
    {
        if (!Yii::$app->user->can('storageWebDefaultDelete', ['model' => $this->findModel($id_storage)])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        }
        $model = $this->findModel($id_storage);
        if (!$model->deleteFile($model->name)) {
            \Yii::$app->session->addFlash('error', Module::t('Error deleting file'));
        }

        if (!$model->delete()) {
            \Yii::$app->session->addFlash('error', Module::t('Error deleting file'));
        }
        if ($this->request->isAjax) {
            Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
            return ['success' => true];
        }
        return $this->redirect(['index']);
    }

    public function actionGetFile($id, $access_token = null)
    {
        $file = $this->findModel($id);

        /*  if (!Yii::$app->user->can('storageWebDefaultGetFile', ['model' => $file])) {
            throw new \yii\web\ForbiddenHttpException(Module::t('You are not allowed to access this page.'));
        } */

        $path = Yii::$app->basePath . '/../' . Yii::$app->setting->getValue('storage::path') . '/' . $file->name;

        if (file_exists($path)) {
            return Yii::$app->response->sendFile($path, $file->title . '.' . pathinfo($path, PATHINFO_EXTENSION));
            
        } else {
            throw new NotFoundHttpException(Module::t('The requested file does not exist.'));
        }
    }

    /**
     * Finds the Storage model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param int $id_storage Id Storage
     * @return Storage the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id_storage)
    {
        if (($model = Storage::findOne(['id_storage' => $id_storage])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Module::t('The requested page does not exist.'));
    }
}
